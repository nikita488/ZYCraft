plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'net.minecraftforge.gradleutils' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'com.github.johnrengelman.shadow' version '7.0.+'
    id 'com.matthewprenger.cursegradle' version '1.4.+'
}

version = gradleutils.getMCTagOffsetBranchVersion(minecraft_version)
group = "${mod_base_package}.${mod_id}"
archivesBaseName = mod_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
ext.MOD_VERSION = gradleutils.getTagOffsetVersion()

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println(mod_name + ' ' + version)

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            args '--username', 'Dev###'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods { "${mod_id}" { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods { "${mod_id}" { source sourceSets.main } }
        }
		
		gameTestServer {
            workingDirectory project.file('run')

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods { "${mod_id}" { source sourceSets.main } }
        }

        data {
            workingDirectory project.file('run')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods { "${mod_id}" { source sourceSets.main } }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "mixins.${mod_id}.json"

    debug.verbose = true
    debug.export = true
}

repositories {
    mavenLocal()
    maven { url 'https://maven.tterrag.com' }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven { url 'https://dvs1.progwml6.com/files/maven' }
    maven { url 'https://maven.k-4u.nl' }
}

configurations {
    shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    def registrate = "com.tterrag.registrate:Registrate:MC${minecraft_version}-${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate

    implementation fg.deobf("team.chisel.ctm:CTM:${minecraft_version}-${ctm_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    implementation fg.deobf("curse.maven:the-one-probe-245211:3671753")
    implementation fg.deobf("curse.maven:jade-324717:${jade_file_id}")
    //compileOnly fg.deobf("mcjty.theoneprobe:theoneprobe:1.18-5.1.0-8:api")
    //runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:1.18-5.1.0-8")
}

// This block of code expands all the gradle properties in the specified resource targets.
// It copies them into the targets and expands all the defined properties.
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', "mixins.${mod_id}.json".toString()]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: project.ext.MOD_VERSION,
        mod_authors: mod_authors, mod_description: mod_description,
        mod_display_url: mod_display_url, mod_issue_tracker_url: mod_issue_tracker_url, mod_license: mod_license,
        minecraft_version_range: minecraft_version_range, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range]

processResources {
    exclude '.cache'
    exclude '**/*.psd'
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

jar {
    classifier 'slim'

    manifest {
        attributes([
                'Specification-Title': mod_id,
                'Specification-Vendor': mod_authors,
                'Specification-Version': '1',
                'Implementation-Title': project.name,
                'Implementation-Version': project.ext.MOD_VERSION,
                'Implementation-Vendor': mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

shadowJar {
    classifier ''
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', "${project.group}.repack.registrate"
    finalizedBy 'reobfShadowJar'
}

reobf {
    shadowJar {}
}

task apiJar(type: Jar) {
    classifier 'api'
    from sourceSets.main.allSource
    from sourceSets.main.output
    include "${mod_base_package}/${mod_id}/api/**"
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            artifact apiJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.curseforge.enabled = project.hasProperty('api_key')

curseforge {
    if (project.hasProperty("api_key")) {
        apiKey = project.api_key
    }

    project {
        id = "${project_id}"
        changelog = file('CHANGELOG.md')
        changelogType = 'markdown'
        releaseType = project.hasProperty('release_type') ? project.release_type : 'beta'
        addGameVersion "${minecraft_version}"
        mainArtifact(shadowJar) {
            displayName = "${mod_name} ${project.version}"
        }
        addArtifact apiJar
        addArtifact sourcesJar
        relations {
            requiredDependency 'ctm'
            optionalDependency 'jei'
            optionalDependency 'the-one-probe'
            optionalDependency 'jade'
        }
    }

    options {
        debug = false
    }
}